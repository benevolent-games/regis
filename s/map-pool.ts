
export function randomMap() {
	return {name: "override", ascii: mapPool.skywalker}

	const maplist = Object.entries(mapPool)
	const index = Math.floor(Math.random() * maplist.length)
	const [name, ascii] = maplist[index]
	return {name, ascii}
}

export const blankMap = `
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
	.    .    .    .    .    .    .    .
`

export const mapPool = {

	// blankMap: `
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// 	.    .    .    .    .    .    .    .
	// `,

	// bridgePreset: `
	// 	#b   #$♟  #    =^   =^%  =^   #    #$♕
	// 	#    #♚   #A   .    .    .    #♖   #
	// 	=^♝  =    .^   .^   .^   .^   =$   =^
	// 	=    =♞   =    =    =    =    =    =
	// 	=    =    =    =    =    =    =♘   =
	// 	=^   =$   .^   .^   .^   .^   =♗   =^
	// 	#    #♜   .    .    .    #A   #♔   #
	// 	#$♛  #    =^   =^%  =^   #    #$♙  #b
	// `,

	bridge: `
		#b   #$   #    =^   =^%  =^   #    #$
		#    #♚   #A   .    .    .    #    #
		=^   =    .^   .^   .^   .^   =$   =^
		=    =    =    =    =    =    =    =
		=    =    =    =    =    =    =    =
		=^   =$   .^   .^   .^   .^   =    =^
		#    #    .    .    .    #A   #♔   #
		#$   #    =^   =^%  =^   #    #$   #b
	`,

	overpass: `
		=    =    .    .    .    .    =    =
		=    =    =^   #    #    =^   =    =
		=    =    =^   #    #    =^   =    =
		=$   =    .    .    .    .    =    =$
		#    =    .    .    .    .    =    #
		=    =    =    .    .    =    =    =
		=k   =♔   =A   .    .    =A   =♚   =k
		.^   =$   =r   .    .    =r   =$   .^
	`,

	basin: `
		#^A  #^$  #    =^%  =^%  #    #^$  #^A
		#^k  #♔   #    =%   =%   #    #♚   #^k
		#^r  #    #    .^   .^   #    #    #^r
		#    #    #    .    .    #    #    #
		=^   =    .^   .    .    .^   =    =^
		=    =    #    .    .    #    =    =
		=    =    .^   .    .    .^   =    =
		=$   =    .^   .    .    .^   =    =$
	`,

	basin2: `
		#^A  #^$  #    x    x    #    #^$  #^A
		#^k  #♔   #    x    x    #    #♚   #^k
		#^r  #    #    .    .    #    #    #^r
		#    #    #    .    .    #    #    #
		=^   =    .^   .    .    .^   =    =^
		=    =    #    .    .    #    =    =
		=    =    .^   .    .    .^   =    =
		=$   =    .^   .    .    .^   =    =$
	`,

	crossover: `
		=$   =♚   =    .^   .^   =    =    =$
		=k   =r   =    .    .    =    =    =A
		=^%  =^%  =^%  .    .    #    =    #
		=    =    =    =    =    =    =    =
		=    =    =    =    =    =    =    =
		#    =    #    .    .    =^%  =^%  =^%
		=A   =    =    .    .    =    =r   =k
		=$   =    =    .^   .^   =    =♔   =$
	`,

	monument: `
		.^$  .    .%   .    .    .^A  .^$  =
		.    .    #    .    .    .    .♚   .^k
		.    .^   =    =^   .    .    .    .^r
		.    .^   =    #    #    .    .    .
		.    .    .    #    #    =    .^   .
		.^r  .    .    .    =^   =    .^   .
		.^k  .♔   .    .    .    #    .    .
		.    .^$  .^A  .    .    .%   .    .^$
	`,

	catwalk: `
		x    x    x    x    x    x    x    x
		=    =    =^   #    =^   =    .^   x
		.^   .^   .    #    .    .    .    x
		.A   .    .    #    .    .    .♔   x
		.B   .    .    #    .    .    .B   x
		.♚   .    .    #    .    .    .A   x
		.    .    .    #    .    .^   .^   x
		.^   =    =^   #    =^   =    =    x
	`,

	canal: `
		=    =    .^   .    .    #^   =    =♚
		=    =    .^   .    .    #    =    =$
		=    =    #    .    .    #^   =    =r
		=A   =    #^   .    .    #    =    =k
		=k   =    #    .    .    #^   =    =A
		=r   =    #^   .    .    #    =    =
		=$   =    #    .    .    .^   =    =
		=♔   =    #^   .    .    .^   =    =
	`,

	slanted: `
		=$   =r   .^   =A   =$   .    .    .♚
		=k   =    .^   =    =    .    .    .$
		.    .    .    .    .    .    .    .
		.    =    =    .    .    =    =    .
		.    =    =    .    .    =    =    .
		.    .    .    .    .    .    .    .
		.$   .    .    =    =    .^   =    =k
		.♔   .    .    =$   =A   .^   =r   =$
	`,

	finlayson: `
		.    .    .    .    .    .k   .r   .$
		.    .^   .^   .^   .^   .^   .    .♚
		.    .^   =    =^   =    =    .^   .A
		.    .^   =^   #    #$   =    .^   .
		.    .^   =    #$   #    =^   .^   .
		.A   .^   =    =    =^   =    .^   .
		.♔   .    .^   .^   .^   .^   .^   .
		.$   .r   .k   .    .    .    .    .
	`,

	battlements: `
		.$   .B   .A   .♚   .    .    .    .$
		.^   .    .    .^   .    .^   .    .^
		=    .    .    =    .    =    .    =
		=    .    .    .    .    .    .    .
		.    .    .    .    .    .    .    =
		=    .    =    .    =    .    .    =
		.^   .    .^   .    .^   .    .    .^
		.$   .    .    .    .♔   .A   .B   .$
	`,

	opposition: `
		=$   =♚   .    .    .    .    .    .$
		=B   =    .    .    .$   =    .    .
		=A   =    .    .    .    .    .    .
		=    =    .    .    .    .    .^   .^
		.^   .^   .    .    .    .    =    =
		.    .    .    .    .    .    =    =A
		.    .    =    .$   .    .    =    =B
		.$   .    .    .    .    .    =♔   =$
	`,

	simplex: `
		.$   .♚   =    .    .    .    .    .$
		.B   .    .    .    =    .    .    .
		.A   .    =    .    .    .    .    .
		.    .    =    .    .    =    =    .
		.    =    =    .    .    =    .    .
		.    .    .    .    .    =    .    .A
		.    .    .    =    .    .    .    .B
		.$   .    .    .    .    =    .♔   .$
	`,

	skywalker: `
		#$   #    #    #    #    .    #    #$
		#B   #♚   .    .    #    .    #    #
		#A   #    .    .    #    #    #    #
		#    #    #    #    #    .    .    #
		#    .    .    #    #    #    #    #
		#    #    #    #    .    .    #    #A
		#    #    .    #    .    .    #♔   #B
		#$   #    .    #    #    #    #    #$
	`,

	cubicles: `
		=    =    =    =    =    =    =    =
		.$   .k   .r   .    .    .    .    =
		.A   .♚   .    .    =    .    .    =
		.    .    .    .    =    .    .    =
		.    =    =    =    =    =    .    =
		.    .    =    .    .    .    .    =
		.    .    =    .    .    .♔   .A   =
		.    .    .    .    .r   .k   .$   =
	`,

	dashes: `
		=    =    =    =    =    =    =    =
		.$   .k   .r   .    .    .    .    =
		.A   .♚   .    .    .    .    .    =
		.    .    .    .    .    .    .    =
		=    .%   =    .    =    .%   =    =
		.    .    .    .    .    .    .    =
		.    .    .    .    .    .♔   .A   =
		.    .    .    .    .r   .k   .$   =
	`,

	pontifex: `
		=$   =    .^   #    =    =    =k   =♚^
		=A   =    .^   .^   =    =    =    =$
		.^   .^   .    .    #    #    =    =r
		#    .^   .    .    .    #    =    =
		=    =    #    .    .    .    .^   #
		=r   =    #    #    .    .    .^   .^
		=$   =    =    =    .^   .^   =    =A
		=♔^  =k   =    =    #    .^   =    =$
	`,

} satisfies Record<string, string>

